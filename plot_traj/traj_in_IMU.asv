%%%
% transform coordinates from world to IMU
% see what's going on 

function traj_in_IMU(fdir)

if nargin == 0
    fdir = './results/GT'; 
end

addpath('../ground_truth_zh');

% load viorb trajectory 
% f_viorb = strcat(fdir, '/viorb.log');
% T_viorb = load(f_viorb); 

% load okvis trajecotry
 f_okvis = strcat(fdir, '/okvis.log');
 T_okvis = load(f_okvis); 

% load vins-mono trajectory 
 f_vins = strcat(fdir, '/vins-mono.log');
 T_vins = load(f_vins);

% load vins-mono_ext trajectory
 f_ext = strcat(fdir, '/vins-mono_ext.log');
 T_ext = load(f_ext); 

% transform viorb based on the coordinate of VINS-Mono_ext
% T_viorb(:, 1:8) = transform_viorb(T_ext(1,1:8), T_viorb(:, 1:8));

% load ground truth 
f_gt = strcat(fdir, '/ground_truth_g.log');
T_gt = load(f_gt);

s = 1;
e = 200;

%% transform into the coordinate of the first pose
T_okvis = transform_to_first(T_okvis);
T_vins = transform_to_first(T_vins);
T_ext = transform_to_first(T_ext);

%% transform to synchronized pose got from test_gt,
% and then align with gt's trajectory
T_vins = align_transform(T_vins, T_gt);
T_ext = align_transform(T_ext, T_gt);
T_okvis = align_transform(T_okvis, T_gt);
% T_okvis = transform_to_synchronized(T_okvis, T_gt, 237);

% plot_xyz(-T_viorb(:,3), -T_viorb(:, 2), T_viorb(:, 4), 'm-'); 
% plot_xyz(T_viorb(:,2), -T_viorb(:, 3), T_viorb(:, 4), 'm-');
% hold on;
 plot_xyz(T_okvis(:,2), T_okvis(:, 4), T_okvis(:, 3), 'b:');
 hold on; 

% plot_xyz( T_gt(:,4), -T_gt(:,2),T_gt(:,3), 'k-');

plot_xyz(T_vins(:,2), T_vins(:, 4), T_vins(:, 3), 'r--.');
hold on;
plot_xyz(T_ext(:,2), T_ext(:, 4), T_ext(:, 3), 'g-.');
hold on;
plot_xyz( T_gt(:,2), T_gt(:,4), T_gt(:,3), 'k-');
grid on;
% legend('VIORB', 'OKVIS', 'VINS-Mono', 'Proposed');
legend('OKVIS', 'VINS-Mono', 'Proposed', 'GT');


end

%% 
function pose = align_transform(pose, gt)
    index = find_index(gt(:,1), pose(1,1));
    [pose, pts_f, pts_t] = transform_to_synchronized(pose, gt, index);
    pose = compute_transform(pose, pts_f(:,:), pts_t(:,:));
end

%% compute first index of gt, given the already matched timestamp from test_gt
function index = find_index(t, first_timestamp_pose)
    index = -1;
    %% the following two are matched 
    vt = 1498879054.726535936;
    gt = 12.125; 
    if first_timestamp_pose > 1e12
        first_timestamp_pose = first_timestamp_pose * 1e-9;
    end
    dt = vt - first_timestamp_pose;
    for i=1:size(t,1)
        if t(i) + dt >= gt
            index = i;
            break;
        end
    end
end


%% find transformation between two point sets
function pose = compute_transform(pose, pts_f, pts_t)
     
    plot_xyz(pts_f(:,1), pts_f(:,2), pts_f(:,3), 'r*');
    hold on;
    plot_xyz(pts_t(:,1), pts_t(:,2), pts_t(:,3), 'bs');

    [rot, trans] = eq_point(pts_t', pts_f');
    
    pts_tt = rot * pts_f' + repmat(trans,1, size(pts_f,1));
    pts_tt = pts_tt';
    dt = 
    
    hold on; 
    plot_xyz(pts_tt(:,1), pts_tt(:,2), pts_tt(:,3), 'g+');
    
    for i=1:size(pose)
        t = pose(i, 2:4);
        t = rot * t' + trans;
        pose(i,2:4) = t';
    end
end


%% transform into the coordinate of the synchronized pose
function [pose, pt_f, pt_t] = transform_to_synchronized(pose, gt, index)
    Tw2l = construct(gt(index, 2:8));
    Tl2s = transformB2S();
    Tw2s = Tw2l * Tl2s; 
    time_s = 1.;
    t_p = pose(1,1);
    if t_p > 1e12
        time_s = 1e-9;
    end
    t_p = t_p * time_s;
    t_g = gt(index,1);
%     plot_axis(Tw2l(1:3, 1:3), Tw2s(1:3,4), 1);
%     hold on;
%     plot_axis(Tw2s(1:3, 1:3), Tw2s(1:3,4), 2);
    pt_f = [];
    pt_t = [];
    from = 1;
    for i = 1:size(pose,1)
       Ts2i = construct(pose(i,2:8));
       Tw2i = Tw2s * Ts2i;
       [q, t] = deconstruct(Tw2i);
       pose(i, 2:4) = t(:);
       pose(i, 5:7) = q(2:4);
       pose(i, 8) = q(1);
       
       %% find correspond point sets
       timestamp = pose(i,1)*time_s;
       j = find_correspond( gt(:,1), t_g + timestamp - t_p, from);
       if j > from
            pt_f = [pt_f; pose(i,2:4)];
            pt_t = [pt_t; gt(j, 2:4)];
            from = j;
       else
          % fprintf('find_correspond error? from = %d j = %d\n', from, j);
       end
    end
end

%% find corresponding point 
function j = find_correspond(x, timestamp, from)
    j = from;
    for i = from:size(x,1)
        if x(i) > timestamp && x(i) - timestamp < 0.03
            j = i;
            break;
        end
    end
end



%% transform into the coordinate of the first pose
function pose = transform_to_first(pose)
   Too = construct(pose(1, 2:8));
   Too_inv = inv(Too);
   Tb2s = transformB2S(); 
   Ts2b = inv(Tb2s); 
   
   for i=1:size(pose,1)
       Tii = construct(pose(i, 2:8));
       Ts2i = Too_inv * Tii; 
       [q, t] = deconstruct(Ts2i); 
       pose(i, 2:4) = t(:);
       pose(i, 5:8) = q(:);
   end
end

%% construct Tb2s 
function Tb2s = transformB2S()
    t_b2s = [-0.01, -0.015, 0.03]';
    theta = 20*pi/180;
    cs = cos(theta);
    ss = sin(theta); 
    R_b2s = [1  0 0;
             0 cs -ss;
             0 ss cs];
    Tb2s = [R_b2s t_b2s; 
            0 0 0 1];
end

function plot_axis(gRp, C, axisLength)

    if ~isempty(axisLength)
        % draw the camera axes
        xAxis = C+gRp(:,1)*axisLength;
        L = [C xAxis]';
        line(L(:,1),L(:,2),L(:,3),'Color','r','LineWidth',4);

        yAxis = C+gRp(:,2)*axisLength;
        L = [C yAxis]';
        line(L(:,1),L(:,2),L(:,3),'Color','g','LineWidth',4);

        zAxis = C+gRp(:,3)*axisLength;
        L = [C zAxis]';
        line(L(:,1),L(:,2),L(:,3),'Color','b','LineWidth',4);
    end
end

